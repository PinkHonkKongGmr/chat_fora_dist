{"version":3,"sources":["events.js","App.js","components/loginForm.js","components/layout.js","components/auth.js","components/mediaHandler.js","components/stream.js","components/chat.js","components/chatroom.js","index.js"],"names":["module","exports","COMMUNIYU_CHAT","USER_CONNECTED","MESSAGE_RECIEVED","MESSAGE_SENT","USER_DISCONNECTED","TYPING","VERIFY_USER","JOIN_ROOM","NEW_ROOM","LOGOUT","App","_ref","children","react_default","a","createElement","react","LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setUser","user","isUser","console","log","setError","socket","setState","login","localStorage","setItem","name","id","emit","setTimeout","window","location","href","state","chatLink","handleSubmit","event","preventDefault","nickname","getItem","handleChange","target","value","error","_this2","_this$state","className","onSubmit","htmlFor","ref","input","textInput","type","onChange","placeholder","Component","socketUrl","uuidv4","require","Layout","initSocket","io","on","logout","loginForm","Auth","layout_Layout","MediaHandler","soundState","Promise","res","soundOn","confirm","navigator","mediaDevices","getUserMedia","video","audio","then","stream","Stream","hasMedia","otherUserId","participants","peers","mediaHandler","setupPusher","callTo","bind","assertThisInitialized","startPeer","roomId","getPermissions","myVideo","srcObject","e","src","URL","createObjectURL","play","_this3","pusher","Pusher","cluster","authEndpoint","forceTLS","auth","params","channel","subscribe","concat","signal","peer","userId","undefined","data","_this4","initiator","arguments","length","Peer","trickle","trigger","userVideo","destroy","participantsNumber","_this5","map","participant","index","key","onClick","autoPlay","playsInline","Chat","message","chat","messages","messageArray","body","elements","from","chatWindowRef","scrollTop","scrollHeight","stream_Stream","React","Chatroom","match","verify","verifiInd","ReactDOM","render","react_router_dom","src_App","react_router","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.fbebfa33.chunk.js","sourcesContent":["// события для io.socket используются пока не все\r\n// файл представлен  двух копиях. на сервере и на клиенте\r\nmodule.exports={\r\n  COMMUNIYU_CHAT:'COMMUNIYU_CHAT',\r\n  USER_CONNECTED:'USER_CONNECTED',\r\n  MESSAGE_RECIEVED:'MESSAGE_RECIEVED',\r\n  MESSAGE_SENT:'MESSAGE_SENT',\r\n  USER_DISCONNECTED:'USER_DISCONNECTED',\r\n  TYPING:'TYPING',\r\n  VERIFY_USER:'VERIFY_USER',\r\n  JOIN_ROOM:'JOIN_ROOM',\r\n  NEW_ROOM:'NEW_ROOM',\r\n  LOGOUT: 'LOGOUT'\r\n}\r\n","import React, { Fragment } from 'react';\r\nconst App =({children})=>\r\n  (<Fragment>{children}</Fragment>)\r\nexport default App;\r\n","import React, {Component} from 'react';\r\nimport {VERIFY_USER,NEW_ROOM} from '../events'\r\nimport '../main.css';\r\nclass LoginForm extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={\r\n      nickname:\"\",\r\n      error:\"\",\r\n      login:false,\r\n      chatLink:'/chatroom/'+this.props.id\r\n    };\r\n  }\r\n\r\n  setUser=({user,isUser})=>{\r\n    console.log(isUser);\r\n    if(isUser)\r\n    {\r\n      this.setError('такой волчонок уже есть')\r\n    }\r\n    else {\r\n      const {socket} = this.props\r\n      this.props.setUser(user)\r\n      this.setState({login:true})\r\n      localStorage.setItem('name',user.name)\r\n      localStorage.setItem('id',user.id);\r\n      socket.emit(NEW_ROOM,this.props.id);\r\n      setTimeout(()=> {\r\n        window.location.href=this.state.chatLink;\r\n      }, 0);\r\n\r\n    }\r\n  }\r\n  handleSubmit=event=>{\r\n    event.preventDefault();\r\n    const {socket} = this.props\r\n    const {nickname} = this.state\r\n    socket.emit(VERIFY_USER,nickname,localStorage.getItem('id'),this.setUser)\r\n  }\r\n  handleChange=event=>{\r\n    this.setState({nickname:event.target.value})\r\n  }\r\n  setError =(error)=>\r\n  {\r\n    this.setState({error})\r\n    setTimeout(()=> {\r\n      this.setState({error:\"\"})\r\n    }, 1100);\r\n  }\r\n  render() {\r\n    const {nickname,error}=this.state\r\n    return (\r\n      <div className=\"login\">\r\n        <form onSubmit ={this.handleSubmit} className=\"login-form\">\r\n         <label htmlFor='nickname'>\r\n         <h1><span className='chatV'>ЧАТ ВОЛЧАТ__</span><span className='web'>[web2019]</span></h1>\r\n         <p>Чат без регистрации.Просто введи имя и общайся!</p>\r\n         </label>\r\n          <input\r\n           ref={(input)=>{this.textInput = input}}\r\n           type=\"text\"\r\n           id =\"nickname\"\r\n           value = {nickname}\r\n           onChange = {this.handleChange}\r\n           placeholder = {'enter_here_volchonok_name'}\r\n           />\r\n           <div className=\"error\">{error?error:null}</div>\r\n\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm\r\n","import React, {Component} from 'react';\r\nimport io from 'socket.io-client';\r\nimport {USER_CONNECTED,LOGOUT} from '../events';\r\nimport LoginForm from './loginForm';\r\nconst socketUrl='http://localhost:5000';\r\nconst uuidv4 =require('uuid/v4');\r\nexport default class Layout extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      socket:null,\r\n      user:null,\r\n      chatLink:null\r\n    }\r\n  }\r\n// Инициализируем сокет, управляем пользователями(создаем, удаляем, проверяем уникальность)\r\n// также на этом этапе идет проверка проел ли пользователь по ссылке конктретной комнаты или\r\n// зашел с главной\r\n  componentWillMount(){\r\n    this.initSocket()\r\n    !this.props.id?this.setState({chatLink:uuidv4()}):this.setState({chatLink:this.props.id})\r\n  }\r\n\r\n  initSocket = ()=>{\r\n    const socket = io(socketUrl);\r\n    socket.on('connect',()=>{console.log('connected')})\r\n    this.setState({socket});\r\n  }\r\n\r\n  setUser=(user)=>{\r\n    const {socket} =this.state\r\n    socket.emit(USER_CONNECTED,user);\r\n    this.setState({user})\r\n  }\r\n\r\n  logout =()=>{\r\n    const{socket}=this.state\r\n    socket.emit(LOGOUT)\r\n    this.setState({user:null})\r\n  }\r\n\r\n  render() {\r\n    const {socket}=this.state\r\n    return (\r\n      <div className=\"container\">\r\n        <LoginForm socket={socket} setUser={this.setUser} id={this.state.chatLink}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// компонент верификации\r\nimport React, {Component} from 'react';\r\nimport Layout from './layout';\r\n\r\nclass Auth extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Layout/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Auth;\r\n","// активатор стрима\r\nexport default class MediaHandler {\r\n\r\n    constructor(soundState){\r\n        this.soundState=soundState;\r\n    }\r\n\r\n    getPermissions() {\r\n        return new Promise((res) => {\r\n            let soundOn = window.confirm('стрим со звуком?');\r\n            navigator.mediaDevices.getUserMedia({video: true, audio: soundOn})\r\n                .then((stream) => {\r\n                    console.log(res)\r\n                    res(stream);\r\n                })\r\n                // .catch(err => {\r\n                //     throw new Error(`Unable to fetch stream ${err}`);\r\n                // })\r\n        });\r\n    }\r\n}\r\n","// Здесь происходит отрисовка видеосвязи, ее установление\r\n// учет пользователей происходит тоже тут\r\nimport React, {Component} from 'react';\r\nimport MediaHandler from './mediaHandler';\r\nimport {JOIN_ROOM} from '../events';\r\nimport Pusher from 'pusher-js';\r\nimport Peer from 'simple-peer';\r\nimport './stream.css';\r\n\r\nexport default class Stream extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hasMedia: false,\r\n      otherUserId: null,\r\n      participants:null\r\n    };\r\n\r\n    this.user = {id:localStorage.getItem('id')};\r\n    this.user.stream = null;\r\n    this.peers = {};\r\n\r\n    this.mediaHandler = new MediaHandler();\r\n    this.setupPusher();\r\n\r\n    this.callTo = this.callTo.bind(this);\r\n    this.setupPusher = this.setupPusher.bind(this);\r\n    this.startPeer = this.startPeer.bind(this);\r\n  }\r\n\r\n  \r\n\r\n\r\n  componentWillMount() {\r\n    console.log(this.user.id);\r\n    const socket=this.props.socket;\r\n// при подключении пользователя его данные отправляются на сервер, вместе с данными\r\n// комнаты, для установления уникальности\r\n    socket.on('connect', () => {\r\n     socket.emit(JOIN_ROOM,this.props.id,localStorage.getItem('id'),localStorage.getItem('name'));\r\n    })\r\n// фильтрация пользовтаеля по комнате,\r\n// при сопастовлении идет в добавок\r\n    socket.on(JOIN_ROOM, (roomId,participants) => {\r\n      if (roomId===this.props.id) {\r\n        this.setState({\r\n          participants: participants\r\n        });\r\n      }\r\n    })\r\n\r\n    this.mediaHandler.getPermissions()\r\n      .then((stream) => {\r\n        this.setState({\r\n          hasMedia: true\r\n        });\r\n        this.user.stream = stream;\r\n\r\n        try {\r\n\r\n          this.myVideo.srcObject = stream;\r\n        } catch (e) {\r\n          this.myVideo.src = URL.createObjectURL(stream);\r\n        }\r\n\r\n        this.myVideo.play();\r\n      })\r\n  }\r\n\r\n  setupPusher() {\r\n      this.pusher = new Pusher('fd3df13aec3b16a9a3af', {\r\n        cluster: 'eu',\r\n        authEndpoint: 'http://localhost:5000/pusher/auth',\r\n        forceTLS: true,\r\n        auth: {\r\n               params: this.user.id\r\n               }\r\n      });\r\n    this.channel = this.pusher.subscribe('presence-videocall');\r\n\r\n    this.channel.bind(`client-signal-${this.user.id}`, (signal) => {\r\n      console.log(\"клиент сигнал\");\r\n      let peer = this.peers[signal.userId];\r\n      // проверка создан ли уже данный пир, если создан - совершается звонок\r\n      if (peer === undefined) {\r\n        this.setState({\r\n          otherUserId: signal.userId\r\n        });\r\n        peer = this.startPeer(signal.userId, false);\r\n      }\r\n      peer.signal(signal.data);\r\n    });\r\n  }\r\n\r\n  startPeer(userId, initiator = true) {\r\n    console.log(\"старт_пир\");\r\n    const peer = new Peer({\r\n      initiator,\r\n      stream: this.user.stream,\r\n      trickle: false\r\n    });\r\n\r\n    peer.on('signal', (data) => {\r\n      console.log(\"сигнал\");\r\n      this.channel.trigger(`client-signal-${userId}`, {\r\n        type: 'signal',\r\n        userId: this.user.id,\r\n        data: data\r\n      });\r\n    });\r\n\r\n    peer.on('stream', (stream) => {\r\n      \r\n      \r\n      try {\r\n        let confirmToPlay = window.confirm('запустить стрим пользователя?');\r\n        if(confirmToPlay){\r\n          this.userVideo.srcObject = stream; \r\n        }\r\n        else{\r\n          return;\r\n        }\r\n        \r\n      } catch (e) {\r\n        this.userVideo.srcObject = stream;\r\n      }\r\n      ;\r\n      this.userVideo.play();\r\n    });\r\n\r\n    peer.on('close', () => {\r\n      let peer = this.peers[userId];\r\n      if (peer !== undefined) {\r\n        peer.destroy();\r\n      }\r\n\r\n      this.peers[userId] = undefined;\r\n    });\r\n\r\n    return peer;\r\n  }\r\n\r\n  callTo(userId) {\r\n    this.peers[userId] = this.startPeer(userId);\r\n  }\r\n\r\n  render() {\r\n    // перед отрисовкой списка пользователей идет проверка актуального числа\r\n    // [пользователи, покинувшие чат пока не учитываются]\r\n    // также проверяется установлен ли стейт с участгиками чатрума, воизбежание ошибок\r\n        let participants;\r\n        let participantsNumber;\r\n        this.state.participants==null?participantsNumber=0:participantsNumber=this.state.participants.length;\r\n        if(this.state.participants!==null){\r\n           participants= this.state.participants.map((participant,index)=>{\r\n             return<span key={index}>\r\n             <span className='participants'>{participant.name}</span>\r\n              {this.user.id !== participant.id ? <button className=\"btn btn-outline-warning\" key={participant.id} onClick={() =>\r\n              this.callTo(participant.id)}>Call {participant.name}</button> : null}\r\n             </span>\r\n           })\r\n        }\r\n        if(this.state.participants==null) {\r\n          participants = <b></b>\r\n        }\r\n        return (\r\n            <div className=\"streamWindow\">\r\n                <div className='participants'>количество участников:{participantsNumber}</div>\r\n                {participants}\r\n                <div className=\"video-container\"></div>\r\n                <div className=\"video-container\">\r\n                    <video autoPlay playsInline className=\"my-video\" ref={(ref) => {this.myVideo = ref;}}></video>\r\n                    <video autoPlay playsInline className=\"user-video\" ref={(ref) => {this.userVideo = ref;}}></video>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// копонент тела чата. отвечает за отправку-отрисовку сообщений.\r\n// Видеосвязь и учет пользователей проходит на нижнем копоненте stream\r\nimport React from 'react';\r\nimport io from 'socket.io-client';\r\nimport Stream from './stream';\r\nimport './chatroom.css';\r\nconst socketUrl='http://localhost:5000';\r\nconst {MESSAGE_SENT} = require('../events')\r\n\r\nclass Chat extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      messages: [],\r\n      socket:null\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.initSocket()\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    this.chatWindowRef.scrollTop = this.chatWindowRef.scrollHeight;\r\n  }\r\n  \r\n\r\n// на этапе инициализации привязываем к рассылке сообщений от сервера\r\n  // фильтрация сообщений по комнатам(по id)\r\n  initSocket = ()=>{\r\n    const socket = io(socketUrl)\r\n    socket.on(MESSAGE_SENT, message => {\r\n      if(message.chat===this.props.id)\r\n      {this.setState({ messages:message.messageArray})}\r\n    })\r\n    this.setState({socket});\r\n  }\r\n// собираем сообщение из никнейма, послания,id комнаты и отправляем на сервер\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const body = event.target.elements.input.value\r\n    if (body) {\r\n      const message = {\r\n        body,\r\n        from: this.props.name,\r\n        chat:this.props.id\r\n      }\r\n      this.state.socket.emit(MESSAGE_SENT, message)\r\n      event.target.elements.input.value = ''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // перед рендером создается компонент message из массива,который сформирован на сервере\r\n    // в соответсвующей комнате,\r\n    // содержащего сообщения, приходящего сервера.\r\n    const {socket}=this.state;\r\n    const id =this.props.id;\r\n    const messages = this.state.messages.map((message, index) => {\r\n      return <li key={index}>\r\n      <b>{message}</b>\r\n      </li>\r\n\r\n    });\r\n\r\n    return(\r\n      <div>\r\n        <h1>ЧАт волчат</h1>\r\n        <div className='chatRoom'>\r\n          <Stream socket={socket} id={id}></Stream>\r\n          <div>\r\n          <form  onSubmit={this.handleSubmit}>\r\n              <input\r\n                id='input'\r\n                type=\"text\"\r\n                placeholder='Enter a message'/>\r\n            </form>\r\n          <div \r\n          ref={(chatWindowRef)=>this.chatWindowRef=chatWindowRef}\r\n          className='chatWindow'>\r\n            {messages}\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Chat;\r\n","// Здесь копмоненты отвественные за проверку верификации.\r\n// Если она есть пользователь идет в чатрум, если нет- вводит имя\r\n// Кроме того, если не верефицированный пользователь прошел по ссылке,\r\n// здесь она сохраняется, чтобы потом перейти в нужную комнату\r\nimport React, {Component} from 'react';\r\nimport Layout from './layout';\r\nimport Chat from './chat';\r\nclass Chatroom extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state={\r\n        id:this.props.match.params.id,\r\n        name:localStorage.getItem('name'),\r\n        verify:false\r\n      }\r\n    }\r\n\r\n    componentWillMount(){\r\n      if(localStorage.getItem('name')){this.setState({verify:true})}\r\n    }\r\n\r\n  render() {\r\n    const verifiInd= this.state.verify;\r\n    console.log(verifiInd);\r\n    return (\r\n      <div className=\"App\">\r\n      {verifiInd?<Chat name={this.state.name} id={this.state.id}/>:<Layout id={this.state.id}/>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Chatroom;\r\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport Auth from './components/auth'\r\nimport Chatroom from './components/chatroom'\r\n\r\n\r\nReactDOM.render((\r\n  <BrowserRouter>\r\n    <App>\r\n      <Switch>\r\n        <Route exact path='/' component={Auth}/>\r\n        <Route exact path='/chatroom/:id' component={Chatroom}/>\r\n    \r\n      </Switch>\r\n    </App>\r\n  </BrowserRouter>\r\n), document.getElementById('root'));\r\n"],"sourceRoot":""}